package modules

import (
	"html/template"
	"strings"

	psg "github.com/lyft/protoc-gen-star/v2"
	pgsgo "github.com/lyft/protoc-gen-star/v2/lang/go"
)

const configName = "config"

type configModule struct {
	*psg.ModuleBase
	ctx pgsgo.Context
	tpl *template.Template
}

func Config() psg.Module {
	return &configModule{ModuleBase: &psg.ModuleBase{}}
}

func (m *configModule) Name() string {
	return configName
}

func (m *configModule) InitContext(c psg.BuildContext) {
	m.ModuleBase.InitContext(c)
	m.ctx = pgsgo.InitContext(c.Parameters())

	tpl := template.New("service").Funcs(map[string]interface{}{
		"package": m.ctx.PackageName,
		"name":    m.ctx.Name,
	})

	m.tpl = template.Must(tpl.Parse(configTpl))
}

func (m *configModule) Execute(targets map[string]psg.File, packages map[string]psg.Package) []psg.Artifact {
	for _, t := range targets {
		m.generate(t)
	}

	return m.Artifacts()
}

func (m *configModule) generate(f psg.File) {
	if len(f.Messages()) == 0 || !strings.Contains(f.InputPath().BaseName(), "-config") {
		return
	}
	name := m.ctx.OutputPath(f).SetBase(f.InputPath().BaseName()).SetExt(".config.pb.go")
	m.AddGeneratorTemplateFile(name.String(), m.tpl, f)
}

const configTpl = `// Code generated by protoc-gen-config. DO NOT EDIT.
// source: {{ .Name }}

package {{ package . }}

import (
	"os"
	"gopkg.in/yaml.v3"
)

func FromYaml(filePath string) (*AppConfig, error) {
	if filePath == "" {
		filePath = "config/app_config.yaml"
	}
	// Load config from file
	file, err := os.ReadFile(filePath)
	if err != nil {
		return nil, err
	}
	config := &AppConfig{}
	err = yaml.Unmarshal(file, config)
	if err != nil {
		return nil, err
	}
	return config, nil
}
`
